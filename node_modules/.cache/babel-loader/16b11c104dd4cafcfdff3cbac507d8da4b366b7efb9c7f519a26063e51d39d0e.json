{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/ProtectedRoute.js\";\n// import React, { Children } from 'react';\n// import { Navigate, useLocation } from 'react-router-dom';\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ProtectedRoute(_ref) {\n  let {\n    children,\n    ...props\n  } = _ref;\n  return props.isLoggedIn ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    replace: true,\n    to: \"/sign-in\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 40\n  }, this);\n}\n\n// export default function ProtectedRoute({ children: Component, ...props }) {\n//   // хук useLocation - хук из React Router для получения текущего пути (pathname) URL. \n//   // хук возвращает объект с информацией о текущем местоположении в приложении.\n//   const { pathname } = useLocation();\n//   // это тернарный оператор, который проверяет значение свойства loggedIn из props. \n//   // Если loggedIn = true, возвращается компонент Component (компонент, переданный в качестве element). \n//   // В этом случае, компонент Component будет отображаться со всеми props. \n//   // Если loggedIn равно false, то происходит редирект на страницу входа (/login) с использованием компонента Navigate.\n//   // При редиректе также передается дополнительное состояние (state), в котором указывается backUrl \n//   // со значением текущего пути (pathname). \n//   // Это позволяет вернуть пользователя на исходную страницу после успешного входа.\n//   return <React.Fragment>\n//    props.isLoggedIn ? <children {...props} /> : <Navigate to='/sign-in' state={{ backUrl: pathname }} />\n//    </React.Fragment>;\n// }\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","children","props","isLoggedIn","replace","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/ProtectedRoute.js"],"sourcesContent":["// import React, { Children } from 'react';\n// import { Navigate, useLocation } from 'react-router-dom';\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nexport function ProtectedRoute({ children, ...props }) {\n  return props.isLoggedIn ? children : <Navigate replace to=\"/sign-in\" />;\n}\n\n// export default function ProtectedRoute({ children: Component, ...props }) {\n//   // хук useLocation - хук из React Router для получения текущего пути (pathname) URL. \n//   // хук возвращает объект с информацией о текущем местоположении в приложении.\n//   const { pathname } = useLocation();\n//   // это тернарный оператор, который проверяет значение свойства loggedIn из props. \n//   // Если loggedIn = true, возвращается компонент Component (компонент, переданный в качестве element). \n//   // В этом случае, компонент Component будет отображаться со всеми props. \n//   // Если loggedIn равно false, то происходит редирект на страницу входа (/login) с использованием компонента Navigate.\n//   // При редиректе также передается дополнительное состояние (state), в котором указывается backUrl \n//   // со значением текущего пути (pathname). \n//   // Это позволяет вернуть пользователя на исходную страницу после успешного входа.\n//   return <React.Fragment>\n//    props.isLoggedIn ? <children {...props} /> : <Navigate to='/sign-in' state={{ backUrl: pathname }} />\n//    </React.Fragment>;\n// }"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,SAASC,cAAcA,CAAAC,IAAA,EAAyB;EAAA,IAAxB;IAAEC,QAAQ;IAAE,GAAGC;EAAM,CAAC,GAAAF,IAAA;EACnD,OAAOE,KAAK,CAACC,UAAU,GAAGF,QAAQ,gBAAGH,OAAA,CAACF,QAAQ;IAACQ,OAAO;IAACC,EAAE,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GAlBgBX,cAAc;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}