{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Route, Routes, Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport Register from './Register';\nimport Login from './Login';\nimport InfoTooltip from './InfoTooltip';\nimport { ProtectedRoute } from './ProtectedRoute';\nimport * as auth from '../utils/auth.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Стейт, отвечающий за данные текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  // стейт для хранения карточек:\n  const [cards, setCards] = React.useState([]);\n  //switch state for edit profile popup:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  //switch state for edit avatar popup:\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  //switch state for adding a place popup:\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  //switch state for image popup:\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // объявление состояния вошел ли пользователь в систему:\n  const [loggedIn, setLoggedIn] = React.useState(false);\n  // объявление состояния userData с начальным значением { email: '', password: '' }.\n  // Это состояние хранит данные пользователя (имя пользователя и адрес электронной почты). Для\n  // сохренения данных логина и email в профайле:\n  const [userData, setUserData] = React.useState({\n    email: ''\n  });\n  //switch state for InfoTooltip:\n  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen] = React.useState(false);\n\n  //эффект обращения к API за инфо о пользователе и начальными карточками:\n  React.useEffect(() => {\n    api.getUserInfo().then(data => {\n      setCurrentUser(data);\n    }).catch(err => console.log(err));\n    api.getAllPlaces().then(data => {\n      setCards(data.map(item => ({\n        likes: item.likes,\n        _id: item._id,\n        src: item.link,\n        alt: item.name,\n        owner: item.owner,\n        title: item.name\n      })));\n    }).catch(err => console.log(err));\n  }, []);\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n  function handleCardClick(curentCard) {\n    setSelectedCard(curentCard);\n  }\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n    setIsInfoTooltipPopupOpen(false);\n  }\n  function handleCardDelete(cardId) {\n    api.deletePlace(cardId).then(() => {\n      /* используя методы массива, создаем новый массив карточек newCards, где не будет карточки, которую мы только что удалили */\n      setCards(cards => cards.filter(c => c._id !== cardId));\n    }).catch(err => console.log(err));\n  }\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.likeCard(card._id, !isLiked).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards(state => state.map(c => c._id === card._id ? newCardItem : c));\n    }).catch(err => console.log(err));\n  }\n  function handleCardDisLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.disLikeCard(card._id, isLiked).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards(state => state.map(c => c._id === card._id ? newCardItem : c));\n    }).catch(err => console.log(err));\n  }\n  function handleUpdateUser(userData) {\n    api.editProfileInfo(userData).then(userResponse => {\n      setCurrentUser(userResponse);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n  function handleUpdateAvatar(_ref) {\n    let {\n      avatar\n    } = _ref;\n    api.changeAvatar(avatar).then(linkResponse => {\n      setCurrentUser(linkResponse);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n  function handleAddPlace(place) {\n    api.addPlace(place).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards([newCardItem, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n\n  //  проверяем наличие токена в локальном хранилище:\n  const checkToken = () => {\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      auth.checkToken(jwt).then(user => {\n        handleLogin(user.data);\n      }).catch(err => console.log(err));\n    }\n  };\n  React.useEffect(() => {\n    checkToken();\n  }, []);\n\n  // вызываем useNavigate() (переход на другие страницы) и useLocation() (информация о текущем маршруте):\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // обрабатчик входа пользователя в систему (передаем в Login):\n  const handleLogin = _ref2 => {\n    let {\n      password,\n      email\n    } = _ref2;\n    // обращаемся к API для аутентификации пользователя:\n    auth.login(password, email)\n    // обрабатываем успешное выполнение промиса, получив данные из ответа API в data.\n    .then(data => {\n      // Проверяем, есть ли у полученных данных токен (data.token).\n      if (data.token) {\n        var _location$state;\n        // Если токен существует, сохраняем токен в локальном хранилище:\n        localStorage.setItem('jwt', data.token);\n        // Устанавливаем значение loggedIn в true:\n        setLoggedIn(true);\n        // обновляем данные пользователя для отображения в шапке профиля:\n        setUserData({\n          email\n        });\n        // создаем переменную url, в которую записывается значение location.state?.backUrl или '/main' (если backUrl отсутствует):\n        const url = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.backUrl) || '/main';\n        // переходим на нужный url:\n        navigate(url);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  // Обработчик регистрации пользователя:\n  const handleRegister = _ref3 => {\n    let {\n      password,\n      email\n    } = _ref3;\n    auth.register(password, email).then(data => {\n      setIsInfoTooltipPopupOpen(true);\n      navigate('/sing-in');\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        isLoggedIn: loggedIn,\n        userData: userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-up\",\n          element: /*#__PURE__*/_jsxDEV(Register, {\n            handleRegister: handleRegister\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-in\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            handleLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/main\",\n          element: /*#__PURE__*/_jsxDEV(Main, {\n            onEditProfile: handleEditProfileClick,\n            onAddPlace: handleAddPlaceClick,\n            onEditAvatar: handleEditAvatarClick,\n            onCardClick: handleCardClick,\n            onCardDelete: handleCardDelete,\n            onCardLike: handleCardLike,\n            onCardDislike: handleCardDisLike,\n            cards: cards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        isOpen: isInfoTooltipPopupOpen,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n        popupName: \"popup_type_deleteCard\",\n        popupTitle: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n        buttonName: \"\\u0414\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TYkYj4EH/5MYAsYx9bQZEKeCx9Y=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Route","Routes","Navigate","useNavigate","useLocation","api","CurrentUserContext","Header","Main","Footer","PopupWithForm","ImagePopup","EditProfilePopup","EditAvatarPopup","AddPlacePopup","Register","Login","InfoTooltip","ProtectedRoute","auth","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","useState","cards","setCards","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","selectedCard","setSelectedCard","loggedIn","setLoggedIn","userData","setUserData","email","isInfoTooltipPopupOpen","setIsInfoTooltipPopupOpen","useEffect","getUserInfo","then","data","catch","err","console","log","getAllPlaces","map","item","likes","_id","src","link","alt","name","owner","title","handleEditProfileClick","handleAddPlaceClick","handleEditAvatarClick","handleCardClick","curentCard","closeAllPopups","handleCardDelete","cardId","deletePlace","filter","c","handleCardLike","card","isLiked","some","i","likeCard","newCard","newCardItem","state","handleCardDisLike","disLikeCard","handleUpdateUser","editProfileInfo","userResponse","handleUpdateAvatar","_ref","avatar","changeAvatar","linkResponse","handleAddPlace","place","addPlace","checkToken","jwt","localStorage","getItem","user","handleLogin","navigate","location","_ref2","password","login","token","_location$state","setItem","url","backUrl","handleRegister","_ref3","register","Provider","value","children","className","isLoggedIn","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onEditProfile","onAddPlace","onEditAvatar","onCardClick","onCardDelete","onCardLike","onCardDislike","isOpen","onClose","onUpdateUser","popupName","popupTitle","buttonName","onUpdateAvatar","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/App.js"],"sourcesContent":["import React from 'react';\nimport { Route, Routes, Navigate, useNavigate, useLocation } from 'react-router-dom';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport Register from './Register';\nimport Login from './Login';\nimport InfoTooltip from './InfoTooltip';\nimport { ProtectedRoute } from './ProtectedRoute';\nimport * as auth from '../utils/auth.js';\n\nfunction App() {\n  // Стейт, отвечающий за данные текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  // стейт для хранения карточек:\n  const [cards, setCards] = React.useState([]);\n  //switch state for edit profile popup:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  //switch state for edit avatar popup:\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  //switch state for adding a place popup:\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  //switch state for image popup:\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // объявление состояния вошел ли пользователь в систему:\n  const [loggedIn, setLoggedIn] = React.useState(false);\n  // объявление состояния userData с начальным значением { email: '', password: '' }.\n  // Это состояние хранит данные пользователя (имя пользователя и адрес электронной почты). Для\n  // сохренения данных логина и email в профайле:\n  const [userData, setUserData] = React.useState({ email: '' });\n  //switch state for InfoTooltip:\n  const [isInfoTooltipPopupOpen, setIsInfoTooltipPopupOpen] = React.useState(false);\n\n  //эффект обращения к API за инфо о пользователе и начальными карточками:\n  React.useEffect(() => {\n    api\n      .getUserInfo()\n      .then((data) => {\n        setCurrentUser(data);\n      })\n      .catch((err) => console.log(err));\n    api\n      .getAllPlaces()\n      .then((data) => {\n        setCards(\n          data.map((item) => ({\n            likes: item.likes,\n            _id: item._id,\n            src: item.link,\n            alt: item.name,\n            owner: item.owner,\n            title: item.name,\n          }))\n        );\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n\n  function handleCardClick(curentCard) {\n    setSelectedCard(curentCard);\n  }\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n    setIsInfoTooltipPopupOpen(false);\n  }\n\n  function handleCardDelete(cardId) {\n    api\n      .deletePlace(cardId)\n      .then(() => {\n        /* используя методы массива, создаем новый массив карточек newCards, где не будет карточки, которую мы только что удалили */\n        setCards((cards) => cards.filter((c) => c._id !== cardId));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api\n      .likeCard(card._id, !isLiked)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards((state) => state.map((c) => (c._id === card._id ? newCardItem : c)));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleCardDisLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api\n      .disLikeCard(card._id, isLiked)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards((state) => state.map((c) => (c._id === card._id ? newCardItem : c)));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleUpdateUser(userData) {\n    api\n      .editProfileInfo(userData)\n      .then((userResponse) => {\n        setCurrentUser(userResponse);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleUpdateAvatar({ avatar }) {\n    api\n      .changeAvatar(avatar)\n      .then((linkResponse) => {\n        setCurrentUser(linkResponse);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleAddPlace(place) {\n    api\n      .addPlace(place)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards([newCardItem, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  //  проверяем наличие токена в локальном хранилище:\n  const checkToken = () => {\n    const jwt = localStorage.getItem('jwt');\n    if (jwt) {\n      auth\n        .checkToken(jwt)\n        .then((user) => {\n          handleLogin(user.data);\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n  React.useEffect(() => {\n    checkToken();\n  }, []);\n\n  // вызываем useNavigate() (переход на другие страницы) и useLocation() (информация о текущем маршруте):\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // обрабатчик входа пользователя в систему (передаем в Login):\n  const handleLogin = ({ password, email }) => {\n    // обращаемся к API для аутентификации пользователя:\n    auth\n      .login(password, email)\n      // обрабатываем успешное выполнение промиса, получив данные из ответа API в data.\n      .then((data) => {\n        // Проверяем, есть ли у полученных данных токен (data.token).\n        if (data.token) {\n          // Если токен существует, сохраняем токен в локальном хранилище:\n          localStorage.setItem('jwt', data.token);\n          // Устанавливаем значение loggedIn в true:\n          setLoggedIn(true);\n          // обновляем данные пользователя для отображения в шапке профиля:\n          setUserData({ email });\n          // создаем переменную url, в которую записывается значение location.state?.backUrl или '/main' (если backUrl отсутствует):\n          const url = location.state?.backUrl || '/main';\n          // переходим на нужный url:\n          navigate(url);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // Обработчик регистрации пользователя:\n  const handleRegister = ({ password, email }) => {\n    auth\n      .register(password, email)\n      .then((data) => {\n        setIsInfoTooltipPopupOpen(true);\n        navigate('/sing-in');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      {/* Внедряем» данные из currentUser с помощью провайдера контекста */}\n      <div className=\"App\">\n        <Header isLoggedIn={loggedIn} userData={userData} />\n\n        <Routes>\n          <Route path=\"/sign-up\" element={<Register handleRegister={handleRegister} />} />\n          <Route path=\"/sign-in\" element={<Login handleLogin={handleLogin} />} />\n          <Route\n            path=\"/main\"\n            element={\n              <Main\n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onEditAvatar={handleEditAvatarClick}\n                onCardClick={handleCardClick}\n                onCardDelete={handleCardDelete}\n                onCardLike={handleCardLike}\n                onCardDislike={handleCardDisLike}\n                cards={cards}\n              />\n            }\n          ></Route>\n        </Routes>\n        <InfoTooltip isOpen={isInfoTooltipPopupOpen} onClose={closeAllPopups} />\n        <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlace} />\n        <PopupWithForm popupName=\"popup_type_deleteCard\" popupTitle=\"Вы уверены?\" buttonName=\"Да\"></PopupWithForm>\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n        <Footer />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}