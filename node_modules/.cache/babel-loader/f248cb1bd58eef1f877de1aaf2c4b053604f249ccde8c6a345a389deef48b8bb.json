{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register(_ref) {\n  _s();\n  let {\n    isOpen,\n    onClose\n  } = _ref;\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  });\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n\n  // Обработчик отправки формы:\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const {\n      email,\n      password\n    } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email).then(data => {\n      navigate('/sing-in');\n    }).catch(err => setErrorMessage(err));\n  };\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    popupName: \"popup_type_register\",\n    popupTitle: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C\",\n    isOpen: isOpen,\n    onClose: onClose,\n    onSubmit: handleSubmit,\n    buttonName: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n    buttonNameIsLoad: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u0435...\",\n    showCloseButton: true,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-name\",\n      type: \"text\",\n      name: \"name\",\n      className: \"popup__input popup__input_data_name\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"40\",\n      placeholder: \"\\u0418\\u043C\\u044F\"\n      //value={name || ''}\n      //onChange={handleChangeName}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-name-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input-job\",\n      type: \"text\",\n      name: \"job\",\n      className: \"popup__input popup__input_data_job\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"200\",\n      placeholder: \"\\u041E \\u0441\\u0435\\u0431\\u0435\"\n      //value={description || ''}\n      //onChange={handleChangeDescription}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-job-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this)\n  // <PopupWithForm\n  //   popupName=\"popup_type_register\"\n  //   popupTitle=\"Регистрация\"\n  // //   isOpen={isOpen}\n  // //   onClose={onClose}\n  //   onSubmit={handleSubmit}\n  //   buttonName=\"Зарегистрироваться\"\n  //   buttonNameIsLoad=\"Регистрация...\"\n  //   showCloseButton={false}\n  // >\n  //   <input\n  //     id=\"email\"\n  //     type=\"email\"\n  //     name=\"email\"\n  //     autoComplete=\"email\"\n  //     className=\"popup__input popup__input_data_email\"\n  //     required\n  //     minLength=\"2\"\n  //     maxLength=\"40\"\n  //     placeholder=\"Email\"\n  //     value={formValue.email}\n  //     onChange={handleChange}\n  //   />\n  //   <span id=\"input-email-error\" className=\"error\"></span>\n  //   <input\n  //     id=\"password\"\n  //     name=\"password\"\n  //     type=\"password\"\n  //     autoComplete=\"new-password\"\n  //     className=\"popup__input popup__input_data_password\"\n  //     required\n  //     minLength=\"2\"\n  //     maxLength=\"200\"\n  //     placeholder=\"Пароль\"\n  //     value={formValue.password}\n  //     onChange={handleChange}\n  //   />\n  //   <span id=\"input-password-error\" className=\"error\"></span>\n  // </PopupWithForm>\n  ;\n}\n_s(Register, \"Axk7E/SrHAH7aTJT5v1XDezL8iE=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Link","useNavigate","Header","PopupWithForm","auth","jsxDEV","_jsxDEV","Register","_ref","_s","isOpen","onClose","formValue","setFormValue","email","password","errorMessage","setErrorMessage","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","register","then","data","catch","err","popupName","popupTitle","onSubmit","buttonName","buttonNameIsLoad","showCloseButton","children","id","type","className","required","minLength","maxLength","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\n\nfunction Register({isOpen, onClose}) {\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: '',\n  })\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  }\n\n  // Обработчик отправки формы:\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const { email, password } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email)\n      .then(data => {\n        navigate('/sing-in');\n      })\n      .catch(err => setErrorMessage(err));\n  }\n\n\n  return (\n    <PopupWithForm\n      popupName=\"popup_type_register\"\n      popupTitle=\"Редактировать профиль\"\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      buttonName=\"Сохранить\"\n      buttonNameIsLoad=\"Сохранение...\"\n      showCloseButton={true}\n    >\n      <input\n        id=\"input-name\"\n        type=\"text\"\n        name=\"name\"\n        className=\"popup__input popup__input_data_name\"\n        required\n        minLength=\"2\"\n        maxLength=\"40\"\n        placeholder=\"Имя\"\n        //value={name || ''}\n        //onChange={handleChangeName}\n      />\n      <span id=\"input-name-error\" className=\"error\"></span>\n      <input\n        id=\"input-job\"\n        type=\"text\"\n        name=\"job\"\n        className=\"popup__input popup__input_data_job\"\n        required\n        minLength=\"2\"\n        maxLength=\"200\"\n        placeholder=\"О себе\"\n        //value={description || ''}\n        //onChange={handleChangeDescription}\n      />\n      <span id=\"input-job-error\" className=\"error\"></span>\n    </PopupWithForm>\n    // <PopupWithForm\n    //   popupName=\"popup_type_register\"\n    //   popupTitle=\"Регистрация\"\n    // //   isOpen={isOpen}\n    // //   onClose={onClose}\n    //   onSubmit={handleSubmit}\n    //   buttonName=\"Зарегистрироваться\"\n    //   buttonNameIsLoad=\"Регистрация...\"\n    //   showCloseButton={false}\n    // >\n    //   <input\n    //     id=\"email\"\n    //     type=\"email\"\n    //     name=\"email\"\n    //     autoComplete=\"email\"\n    //     className=\"popup__input popup__input_data_email\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"40\"\n    //     placeholder=\"Email\"\n    //     value={formValue.email}\n    //     onChange={handleChange}\n    //   />\n    //   <span id=\"input-email-error\" className=\"error\"></span>\n    //   <input\n    //     id=\"password\"\n    //     name=\"password\"\n    //     type=\"password\"\n    //     autoComplete=\"new-password\"\n    //     className=\"popup__input popup__input_data_password\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"200\"\n    //     placeholder=\"Пароль\"\n    //     value={formValue.password}\n    //     onChange={handleChange}\n    //   />\n    //   <span id=\"input-password-error\" className=\"error\"></span>\n    // </PopupWithForm>\n  );\n}\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}