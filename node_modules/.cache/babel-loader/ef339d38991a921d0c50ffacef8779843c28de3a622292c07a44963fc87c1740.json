{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/ProtectedRoute.js\";\nimport { Route } from 'react-router-dom';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\n// export function ProtectedRoute({ children, ...props }) {\n//   return props.isLoggedIn ? children : <Navigate replace to=\"/sign-in\" />;\n// }\n\n// export function ProtectedRoute({ children: Component, ...props }) {\n//   // это тернарный оператор, который проверяет значение свойства loggedIn из props.\n//   // Если loggedIn = true, возвращается компонент Component (компонент, переданный в качестве element).\n//   // В этом случае, компонент Component будет отображаться со всеми props.\n//   // Если loggedIn равно false, то происходит редирект на страницу входа (/login) с использованием компонента Navigate.\n//   // При редиректе также передается дополнительное состояние (state), в котором указывается backUrl\n//   // со значением текущего пути (pathname).\n//   // Это позволяет вернуть пользователя на исходную страницу после успешного входа.\n//   return props.isLoggedIn ? <children {...props} /> : <Navigate replace to='/sign-in' />\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ProtectedRoute(props) {\n  const authRoute = /*#__PURE__*/_jsxDEV(Route, {\n    path: props.path,\n    element: props.component\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n  const result = props.isLoggedIn ? authRoute : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/sign-in\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 47\n  }, this);\n  return result;\n  //   return (\n  //     <Routes>\n  //     <Route exact>\n  //       {\n  //         () => props.isLoggedIn ? <Component {...props} /> : <Navigate to=\"/sign-in\" />\n  //       }\n  //     </Route>\n  //     </Routes>\n  // )\n}\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Route","React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","props","authRoute","path","element","component","fileName","_jsxFileName","lineNumber","columnNumber","result","isLoggedIn","to","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/ProtectedRoute.js"],"sourcesContent":["import { Route } from 'react-router-dom';\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\n// export function ProtectedRoute({ children, ...props }) {\n//   return props.isLoggedIn ? children : <Navigate replace to=\"/sign-in\" />;\n// }\n\n// export function ProtectedRoute({ children: Component, ...props }) {\n//   // это тернарный оператор, который проверяет значение свойства loggedIn из props.\n//   // Если loggedIn = true, возвращается компонент Component (компонент, переданный в качестве element).\n//   // В этом случае, компонент Component будет отображаться со всеми props.\n//   // Если loggedIn равно false, то происходит редирект на страницу входа (/login) с использованием компонента Navigate.\n//   // При редиректе также передается дополнительное состояние (state), в котором указывается backUrl\n//   // со значением текущего пути (pathname).\n//   // Это позволяет вернуть пользователя на исходную страницу после успешного входа.\n//   return props.isLoggedIn ? <children {...props} /> : <Navigate replace to='/sign-in' />\n// }\n\nexport function ProtectedRoute(props) {\n  const authRoute = <Route path={props.path} element={props.component} />;\n  const result=props.isLoggedIn ? authRoute : <Navigate to=\"/sign-in\" />;\n  return result;\n  //   return (\n  //     <Routes>\n  //     <Route exact>\n  //       {\n  //         () => props.isLoggedIn ? <Component {...props} /> : <Navigate to=\"/sign-in\" />\n  //       }\n  //     </Route>\n  //     </Routes>\n  // )\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EACpC,MAAMC,SAAS,gBAAGH,OAAA,CAACJ,KAAK;IAACQ,IAAI,EAAEF,KAAK,CAACE,IAAK;IAACC,OAAO,EAAEH,KAAK,CAACI;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;EACvE,MAAMC,MAAM,GAACT,KAAK,CAACU,UAAU,GAAGT,SAAS,gBAAGH,OAAA,CAACF,QAAQ;IAACe,EAAE,EAAC;EAAU;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;EACtE,OAAOC,MAAM;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACG,EAAA,GAbeb,cAAc;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}