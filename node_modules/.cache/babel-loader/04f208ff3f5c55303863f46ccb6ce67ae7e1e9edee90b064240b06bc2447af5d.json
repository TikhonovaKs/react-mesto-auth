{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport Authentication from './Authentication ';\nimport * as auth from '../utils/auth.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register(_ref) {\n  _s();\n  let {} = _ref;\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  });\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n\n  // Обработчик отправки формы:\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const {\n      email,\n      password\n    } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email).then(data => {\n      navigate('/sing-in');\n    }).catch(err => setErrorMessage(err));\n  };\n  return /*#__PURE__*/_jsxDEV(Authentication, {\n    authenticationName: \"register\",\n    authenticationTitle: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\",\n    onSubmit: handleSubmit,\n    buttonName: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      type: \"email\",\n      name: \"email\",\n      autoComplete: \"email\",\n      className: \"authentication__input authentication__input_data_email\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"40\",\n      placeholder: \"Email\",\n      value: formValue.email,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-email-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      name: \"password\",\n      type: \"password\",\n      autoComplete: \"new-password\",\n      className: \"authentication__input authentication__input_data_password\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"200\",\n      placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      value: formValue.password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-password-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Register, \"Axk7E/SrHAH7aTJT5v1XDezL8iE=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Link","useNavigate","Header","Authentication","auth","jsxDEV","_jsxDEV","Register","_ref","_s","formValue","setFormValue","email","password","errorMessage","setErrorMessage","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","register","then","data","catch","err","authenticationName","authenticationTitle","onSubmit","buttonName","children","id","type","autoComplete","className","required","minLength","maxLength","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport Authentication from './Authentication ';\nimport * as auth from '../utils/auth.js';\n\nfunction Register({}) {\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: '',\n  })\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  }\n\n  // Обработчик отправки формы:\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const { email, password } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email)\n      .then(data => {\n        navigate('/sing-in');\n      })\n      .catch(err => setErrorMessage(err));\n  }\n\n  return (\n    <Authentication \n      authenticationName=\"register\"\n      authenticationTitle=\"Регистрация\"\n      onSubmit={handleSubmit}\n      buttonName=\"Зарегистрироваться\"\n    >\n      <input\n        id=\"email\"\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        className=\"authentication__input authentication__input_data_email\"\n        required\n        minLength=\"2\"\n        maxLength=\"40\"\n        placeholder=\"Email\"\n        value={formValue.email}\n        onChange={handleChange}\n      />\n      <span id=\"input-email-error\" className=\"error\"></span>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        autoComplete=\"new-password\"\n        className=\"authentication__input authentication__input_data_password\"\n        required\n        minLength=\"2\"\n        maxLength=\"200\"\n        placeholder=\"Пароль\"\n        value={formValue.password}\n        onChange={handleChange}\n      />\n      <span id=\"input-password-error\" className=\"error\"></span>\n    </Authentication>\n  );\n}\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}