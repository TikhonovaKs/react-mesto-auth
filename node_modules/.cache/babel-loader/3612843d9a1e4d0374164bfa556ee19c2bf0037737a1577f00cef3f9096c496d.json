{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  });\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n\n  // Обработчик отправки формы:\n  const handleSubmit = e => {\n    e.preventDefault();\n    // проверяется, что введенные пароли совпадают. Если нет, то устанавливается сообщение \n    // об ошибке с помощью setErrorMessage.\n    if (formValue.password !== formValue.confirmPassword) {\n      setErrorMessage('Passwords should be equal');\n      return;\n    }\n\n    // извлекаются значения username, email и password из состояния formValue. \n    const {\n      username,\n      email,\n      password\n    } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    duckAuth.register(username, password, email).then(data => {\n      navigate('/login');\n    }).catch(err => setErrorMessage(err));\n  };\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    popupName: \"popup_type_register\",\n    popupTitle: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n    //   isOpen={isOpen}\n    //   onClose={onClose}\n    //   onSubmit={handleSubmit}\n    ,\n    buttonName: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\",\n    buttonNameIsLoad: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F...\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      type: \"email\",\n      name: \"email\",\n      autoComplete: \"email\",\n      className: \"popup__input popup__input_data_email\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"40\",\n      placeholder: \"Email\"\n      // value={formValue.email}\n      // onChange={handleChangeEmail}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-email-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      name: \"password\",\n      type: \"password\",\n      autoComplete: \"new-password\",\n      className: \"popup__input popup__input_data_password\",\n      required: true,\n      minLength: \"2\",\n      maxLength: \"200\",\n      placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n      // value={formValue.password}\n      // onChange={handleChangePassword}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"input-password-error\",\n      className: \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Register, \"Axk7E/SrHAH7aTJT5v1XDezL8iE=\", true);\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","Header","PopupWithForm","auth","jsxDEV","_jsxDEV","Register","_s","formValue","setFormValue","useState","email","password","errorMessage","setErrorMessage","navigate","useNavigate","handleChange","e","name","value","target","handleSubmit","preventDefault","confirmPassword","username","duckAuth","register","then","data","catch","err","popupName","popupTitle","buttonName","buttonNameIsLoad","children","id","type","autoComplete","className","required","minLength","maxLength","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js"],"sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\n\nfunction Register() {\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: '',\n  })\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  }\n\n  // Обработчик отправки формы:\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // проверяется, что введенные пароли совпадают. Если нет, то устанавливается сообщение \n    // об ошибке с помощью setErrorMessage.\n    if (formValue.password !== formValue.confirmPassword) {\n      setErrorMessage('Passwords should be equal');\n      return;\n    }\n\n    // извлекаются значения username, email и password из состояния formValue. \n    const { username, email, password } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    duckAuth.register(username, password, email)\n      .then(data => {\n        navigate('/login');\n      })\n      .catch(err => setErrorMessage(err));\n  }\n\n\n  return (\n    <PopupWithForm\n      popupName=\"popup_type_register\"\n      popupTitle=\"Регистрация\"\n    //   isOpen={isOpen}\n    //   onClose={onClose}\n    //   onSubmit={handleSubmit}\n      buttonName=\"Зарегистрироваться\"\n      buttonNameIsLoad=\"Регистрация...\"\n    >\n      <input\n        id=\"email\"\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        className=\"popup__input popup__input_data_email\"\n        required\n        minLength=\"2\"\n        maxLength=\"40\"\n        placeholder=\"Email\"\n        // value={formValue.email}\n        // onChange={handleChangeEmail}\n      />\n      <span id=\"input-email-error\" className=\"error\"></span>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        autoComplete=\"new-password\"\n        className=\"popup__input popup__input_data_password\"\n        required\n        minLength=\"2\"\n        maxLength=\"200\"\n        placeholder=\"Пароль\"\n        // value={formValue.password}\n        // onChange={handleChangePassword}\n      />\n      <span id=\"input-password-error\" className=\"error\"></span>\n    </PopupWithForm>\n  );\n}\n\nexport default Register;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,KAAKC,IAAI,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA;EACA;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC;IACzCC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA;EACA,MAAMK,QAAQ,GAAGC,WAAW,EAAE;;EAE9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCZ,YAAY,CAAC;MACX,GAAGD,SAAS;MACZ,CAACW,IAAI,GAAGC;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,YAAY,GAAIJ,CAAC,IAAK;IAC1BA,CAAC,CAACK,cAAc,EAAE;IAClB;IACA;IACA,IAAIf,SAAS,CAACI,QAAQ,KAAKJ,SAAS,CAACgB,eAAe,EAAE;MACpDV,eAAe,CAAC,2BAA2B,CAAC;MAC5C;IACF;;IAEA;IACA,MAAM;MAAEW,QAAQ;MAAEd,KAAK;MAAEC;IAAS,CAAC,GAAGJ,SAAS;;IAE/C;IACA;IACA;IACA;IACAkB,QAAQ,CAACC,QAAQ,CAACF,QAAQ,EAAEb,QAAQ,EAAED,KAAK,CAAC,CACzCiB,IAAI,CAACC,IAAI,IAAI;MACZd,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,CACDe,KAAK,CAACC,GAAG,IAAIjB,eAAe,CAACiB,GAAG,CAAC,CAAC;EACvC,CAAC;EAGD,oBACE1B,OAAA,CAACH,aAAa;IACZ8B,SAAS,EAAC,qBAAqB;IAC/BC,UAAU,EAAC;IACb;IACA;IACA;IAAA;IACEC,UAAU,EAAC,8GAAoB;IAC/BC,gBAAgB,EAAC,uEAAgB;IAAAC,QAAA,gBAEjC/B,OAAA;MACEgC,EAAE,EAAC,OAAO;MACVC,IAAI,EAAC,OAAO;MACZnB,IAAI,EAAC,OAAO;MACZoB,YAAY,EAAC,OAAO;MACpBC,SAAS,EAAC,sCAAsC;MAChDC,QAAQ;MACRC,SAAS,EAAC,GAAG;MACbC,SAAS,EAAC,IAAI;MACdC,WAAW,EAAC;MACZ;MACA;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACF3C,OAAA;MAAMgC,EAAE,EAAC,mBAAmB;MAACG,SAAS,EAAC;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,eACtD3C,OAAA;MACEgC,EAAE,EAAC,UAAU;MACblB,IAAI,EAAC,UAAU;MACfmB,IAAI,EAAC,UAAU;MACfC,YAAY,EAAC,cAAc;MAC3BC,SAAS,EAAC,yCAAyC;MACnDC,QAAQ;MACRC,SAAS,EAAC,GAAG;MACbC,SAAS,EAAC,KAAK;MACfC,WAAW,EAAC;MACZ;MACA;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACF3C,OAAA;MAAMgC,EAAE,EAAC,sBAAsB;MAACG,SAAS,EAAC;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3C;AAEpB;AAACzC,EAAA,CAtGQD,QAAQ;AAAA2C,EAAA,GAAR3C,QAAQ;AAwGjB,eAAeA,QAAQ;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}