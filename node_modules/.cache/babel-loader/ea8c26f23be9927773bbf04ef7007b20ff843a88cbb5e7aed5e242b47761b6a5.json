{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register(_ref) {\n  _s();\n  let {\n    isOpen,\n    onClose\n  } = _ref;\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  });\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n\n  // Обработчик отправки формы:\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const {\n      email,\n      password\n    } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email).then(data => {\n      navigate('/sing-in');\n    }).catch(err => setErrorMessage(err));\n  };\n  return (\n    /*#__PURE__*/\n    // <PopupWithForm\n    //   popupName=\"popup_type_register\"\n    //   popupTitle=\"Редактировать профиль\"\n    //   isOpen={isOpen}\n    //   onClose={onClose}\n    //   onSubmit={handleSubmit}\n    //   buttonName=\"Сохранить\"\n    //   buttonNameIsLoad=\"Сохранение...\"\n    //   showCloseButton={true}\n    // >\n    //   <input\n    //     id=\"input-name\"\n    //     type=\"text\"\n    //     name=\"name\"\n    //     className=\"popup__input popup__input_data_name\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"40\"\n    //     placeholder=\"Имя\"\n    //     //value={name || ''}\n    //     //onChange={handleChangeName}\n    //   />\n    //   <span id=\"input-name-error\" className=\"error\"></span>\n    //   <input\n    //     id=\"input-job\"\n    //     type=\"text\"\n    //     name=\"job\"\n    //     className=\"popup__input popup__input_data_job\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"200\"\n    //     placeholder=\"О себе\"\n    //     //value={description || ''}\n    //     //onChange={handleChangeDescription}\n    //   />\n    //   <span id=\"input-job-error\" className=\"error\"></span>\n    // </PopupWithForm>\n    _jsxDEV(PopupWithForm, {\n      popupName: \"popup_type_register\",\n      popupTitle: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n      //   isOpen={isOpen}\n      //   onClose={onClose}\n      ,\n      onSubmit: handleSubmit,\n      buttonName: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\",\n      buttonNameIsLoad: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F...\",\n      showCloseButton: false,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        name: \"email\",\n        autoComplete: \"email\",\n        className: \"popup__input popup__input_data_email\",\n        required: true,\n        minLength: \"2\",\n        maxLength: \"40\",\n        placeholder: \"Email\",\n        value: formValue.email,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"input-email-error\",\n        className: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"password\",\n        name: \"password\",\n        type: \"password\",\n        autoComplete: \"new-password\",\n        className: \"popup__input popup__input_data_password\",\n        required: true,\n        minLength: \"2\",\n        maxLength: \"200\",\n        placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n        value: formValue.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"input-password-error\",\n        className: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Register, \"Axk7E/SrHAH7aTJT5v1XDezL8iE=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Link","useNavigate","Header","PopupWithForm","auth","jsxDEV","_jsxDEV","Register","_ref","_s","isOpen","onClose","formValue","setFormValue","email","password","errorMessage","setErrorMessage","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","register","then","data","catch","err","popupName","popupTitle","onSubmit","buttonName","buttonNameIsLoad","showCloseButton","children","id","type","autoComplete","className","required","minLength","maxLength","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Header from './Header';\nimport PopupWithForm from './PopupWithForm';\nimport * as auth from '../utils/auth.js';\n\nfunction Register({isOpen, onClose}) {\n  // Состояние формы:\n  // Здесь используется хук useState, чтобы создать состояние formValue, которое представляет \n  // значения полей формы регистрации (электронная почта, пароль). \n  // setFormValue является функцией, используемой для обновления состояния formValue.\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: '',\n  })\n\n  // Состояние сообщения об ошибке:\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // вызываем useNavigate(), чтобы получить доступ к функции navigate, \n  // которую можем использовать для перехода на другие страницы.\n  const navigate = useNavigate();\n\n  // Обработчик изменения полей формы:\n  // Функция handleChange принимает объект события в качестве аргумента. \n  // Объект события содержит информацию о произошедшем событии, в данном случае, изменении значения поля формы.\n  // С помощью деструктуризации const { name, value } = e.target; \n  // извлекаются свойства name и value из объекта e.target. \n  // Свойство name содержит имя поля формы, а value содержит новое значение, введенное пользователем.\n  // Затем используется функция setFormValue для обновления состояния formValue. \n  // С помощью синтаксиса расширения объекта (...formValue) создается новый объект, \n  // который содержит все предыдущие значения полей формы. \n  // Затем с использованием квадратных скобок [name] и оператора расширения value обновляется \n  // значение соответствующего поля формы. Это позволяет динамически обновлять только измененное поле, \n  // сохраняя остальные поля неизменными.\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  }\n\n  // Обработчик отправки формы:\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // извлекаются значения email и password из состояния formValue. \n    const { email, password } = formValue;\n\n    // Вызывается функция duckAuth.register (Api) \n    // для регистрации пользователя с переданными данными. Если регистрация проходит успешно, \n    // происходит перенаправление на страницу входа (navigate('/login')). \n    // Если происходит ошибка, сообщение об ошибке устанавливается в состояние errorMessage.\n    auth.register(password, email)\n      .then(data => {\n        navigate('/sing-in');\n      })\n      .catch(err => setErrorMessage(err));\n  }\n\n\n  return (\n    // <PopupWithForm\n    //   popupName=\"popup_type_register\"\n    //   popupTitle=\"Редактировать профиль\"\n    //   isOpen={isOpen}\n    //   onClose={onClose}\n    //   onSubmit={handleSubmit}\n    //   buttonName=\"Сохранить\"\n    //   buttonNameIsLoad=\"Сохранение...\"\n    //   showCloseButton={true}\n    // >\n    //   <input\n    //     id=\"input-name\"\n    //     type=\"text\"\n    //     name=\"name\"\n    //     className=\"popup__input popup__input_data_name\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"40\"\n    //     placeholder=\"Имя\"\n    //     //value={name || ''}\n    //     //onChange={handleChangeName}\n    //   />\n    //   <span id=\"input-name-error\" className=\"error\"></span>\n    //   <input\n    //     id=\"input-job\"\n    //     type=\"text\"\n    //     name=\"job\"\n    //     className=\"popup__input popup__input_data_job\"\n    //     required\n    //     minLength=\"2\"\n    //     maxLength=\"200\"\n    //     placeholder=\"О себе\"\n    //     //value={description || ''}\n    //     //onChange={handleChangeDescription}\n    //   />\n    //   <span id=\"input-job-error\" className=\"error\"></span>\n    // </PopupWithForm>\n    <PopupWithForm\n      popupName=\"popup_type_register\"\n      popupTitle=\"Регистрация\"\n    //   isOpen={isOpen}\n    //   onClose={onClose}\n      onSubmit={handleSubmit}\n      buttonName=\"Зарегистрироваться\"\n      buttonNameIsLoad=\"Регистрация...\"\n      showCloseButton={false}\n    >\n      <input\n        id=\"email\"\n        type=\"email\"\n        name=\"email\"\n        autoComplete=\"email\"\n        className=\"popup__input popup__input_data_email\"\n        required\n        minLength=\"2\"\n        maxLength=\"40\"\n        placeholder=\"Email\"\n        value={formValue.email}\n        onChange={handleChange}\n      />\n      <span id=\"input-email-error\" className=\"error\"></span>\n      <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        autoComplete=\"new-password\"\n        className=\"popup__input popup__input_data_password\"\n        required\n        minLength=\"2\"\n        maxLength=\"200\"\n        placeholder=\"Пароль\"\n        value={formValue.password}\n        onChange={handleChange}\n      />\n      <span id=\"input-password-error\" className=\"error\"></span>\n    </PopupWithForm>\n  );\n}\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}