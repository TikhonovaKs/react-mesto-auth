{"ast":null,"code":"var _jsxFileName = \"/Users/tikhonovaks/dev/react-mesto-auth/src/components/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Route, Routes, Navigate, useNavigate } from 'react-router-dom';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport Register from './Register';\nimport Login from './Login';\nimport { ProtectedRoute } from './ProtectedRoute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Стейт, отвечающий за данные текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  // стейт для хранения карточек:\n  const [cards, setCards] = React.useState([]);\n  //switch state for edit profile popup:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  //switch state for edit avatar popup:\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  //switch state for adding a place popup:\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  //switch state for image popup:\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // объявление состояния вошел ли пользователь в систему:\n  const [loggedIn, setLoggedIn] = React.useState(false);\n  // объявление состояния userData с начальным значением { email: '', password: '' }.\n  // Это состояние хранит данные пользователя (имя пользователя и адрес электронной почты). Для\n  // сохренения данных логина и email в профайле:\n  const [userData, setUserData] = React.useState({\n    email: ''\n  });\n\n  //эффект обращения к API за инфо о пользователе и начальными карточками:\n  React.useEffect(() => {\n    api.getUserInfo().then(data => {\n      setCurrentUser(data);\n    }).catch(err => console.log(err));\n    api.getAllPlaces().then(data => {\n      setCards(data.map(item => ({\n        likes: item.likes,\n        _id: item._id,\n        src: item.link,\n        alt: item.name,\n        owner: item.owner,\n        title: item.name\n      })));\n    }).catch(err => console.log(err));\n  }, []);\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n  function handleCardClick(curentCard) {\n    setSelectedCard(curentCard);\n  }\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n  function handleCardDelete(cardId) {\n    api.deletePlace(cardId).then(() => {\n      /* используя методы массива, создаем новый массив карточек newCards, где не будет карточки, которую мы только что удалили */\n      setCards(cards => cards.filter(c => c._id !== cardId));\n    }).catch(err => console.log(err));\n  }\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.likeCard(card._id, !isLiked).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards(state => state.map(c => c._id === card._id ? newCardItem : c));\n    }).catch(err => console.log(err));\n  }\n  function handleCardDisLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.disLikeCard(card._id, isLiked).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards(state => state.map(c => c._id === card._id ? newCardItem : c));\n    }).catch(err => console.log(err));\n  }\n  function handleUpdateUser(userData) {\n    api.editProfileInfo(userData).then(userResponse => {\n      setCurrentUser(userResponse);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n  function handleUpdateAvatar(_ref) {\n    let {\n      avatar\n    } = _ref;\n    api.changeAvatar(avatar).then(linkResponse => {\n      setCurrentUser(linkResponse);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n  function handleAddPlace(place) {\n    api.addPlace(place).then(newCard => {\n      const newCardItem = {\n        likes: newCard.likes,\n        _id: newCard._id,\n        src: newCard.link,\n        alt: newCard.name,\n        owner: newCard.owner,\n        title: newCard.name\n      };\n      setCards([newCardItem, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n\n  // Функция handleLogin - обработчик события входа в систему. Она вызывается, когда пользователь\n  // успешно входит в систему и передает данные пользователя.\n  // Эта функция обновляет состояния loggedIn и userData\n  // при успешном входе пользователя в систему. Обновление этих состояний может\n  // привести к изменениям в пользовательском интерфейсе, таких как отображение\n  // защищенных маршрутов или отображение информации о пользователе на странице профиля.\n  const handleLogin = _ref2 => {\n    let {\n      email\n    } = _ref2;\n    // setLoggedIn(true); - вызов функции setLoggedIn с аргументом true.\n    // Это обновляет состояние loggedIn и устанавливает его в значение true,\n    // что означает, что пользователь вошел в систему.\n    setLoggedIn(true);\n    // Вызов функции setUserData с объектом, содержащим password и email.\n    // Это обновляет состояние userData и устанавливает его в новый объект с переданными значениями password и email.\n    // Таким образом, данные пользователя обновляются в мой профайл после успешного входа.\n    setUserData({\n      email\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        isLoggedIn: loggedIn,\n        userData: userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-up\",\n          element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-in\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            handleLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/main\",\n          element: /*#__PURE__*/_jsxDEV(Main, {\n            onEditProfile: handleEditProfileClick,\n            onAddPlace: handleAddPlaceClick,\n            onEditAvatar: handleEditAvatarClick,\n            onCardClick: handleCardClick,\n            onCardDelete: handleCardDelete,\n            onCardLike: handleCardLike,\n            onCardDislike: handleCardDisLike,\n            cards: cards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n        popupName: \"popup_type_deleteCard\",\n        popupTitle: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n        buttonName: \"\\u0414\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KgNfZhm63efXQ1LBUbtgYOo3Nq8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Route","Routes","Navigate","useNavigate","api","CurrentUserContext","Header","Main","Footer","PopupWithForm","ImagePopup","EditProfilePopup","EditAvatarPopup","AddPlacePopup","Register","Login","ProtectedRoute","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","useState","cards","setCards","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","selectedCard","setSelectedCard","loggedIn","setLoggedIn","userData","setUserData","email","useEffect","getUserInfo","then","data","catch","err","console","log","getAllPlaces","map","item","likes","_id","src","link","alt","name","owner","title","handleEditProfileClick","handleAddPlaceClick","handleEditAvatarClick","handleCardClick","curentCard","closeAllPopups","handleCardDelete","cardId","deletePlace","filter","c","handleCardLike","card","isLiked","some","i","likeCard","newCard","newCardItem","state","handleCardDisLike","disLikeCard","handleUpdateUser","editProfileInfo","userResponse","handleUpdateAvatar","_ref","avatar","changeAvatar","linkResponse","handleAddPlace","place","addPlace","handleLogin","_ref2","Provider","value","children","className","isLoggedIn","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onEditProfile","onAddPlace","onEditAvatar","onCardClick","onCardDelete","onCardLike","onCardDislike","onClose","isOpen","onUpdateUser","popupName","popupTitle","buttonName","onUpdateAvatar","_c","$RefreshReg$"],"sources":["/Users/tikhonovaks/dev/react-mesto-auth/src/components/App.js"],"sourcesContent":["import React from 'react';\nimport { Route, Routes, Navigate, useNavigate } from 'react-router-dom';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport Register from './Register';\nimport Login from './Login';\nimport { ProtectedRoute } from './ProtectedRoute';\n\nfunction App() {\n  // Стейт, отвечающий за данные текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  // стейт для хранения карточек:\n  const [cards, setCards] = React.useState([]);\n  //switch state for edit profile popup:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  //switch state for edit avatar popup:\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  //switch state for adding a place popup:\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  //switch state for image popup:\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // объявление состояния вошел ли пользователь в систему:\n  const [loggedIn, setLoggedIn] = React.useState(false);\n  // объявление состояния userData с начальным значением { email: '', password: '' }.\n  // Это состояние хранит данные пользователя (имя пользователя и адрес электронной почты). Для\n  // сохренения данных логина и email в профайле:\n  const [userData, setUserData] = React.useState({ email: '' });\n\n  //эффект обращения к API за инфо о пользователе и начальными карточками:\n  React.useEffect(() => {\n    api\n      .getUserInfo()\n      .then((data) => {\n        setCurrentUser(data);\n      })\n      .catch((err) => console.log(err));\n    api\n      .getAllPlaces()\n      .then((data) => {\n        setCards(\n          data.map((item) => ({\n            likes: item.likes,\n            _id: item._id,\n            src: item.link,\n            alt: item.name,\n            owner: item.owner,\n            title: item.name,\n          }))\n        );\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n\n  function handleCardClick(curentCard) {\n    setSelectedCard(curentCard);\n  }\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardDelete(cardId) {\n    api\n      .deletePlace(cardId)\n      .then(() => {\n        /* используя методы массива, создаем новый массив карточек newCards, где не будет карточки, которую мы только что удалили */\n        setCards((cards) => cards.filter((c) => c._id !== cardId));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api\n      .likeCard(card._id, !isLiked)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards((state) => state.map((c) => (c._id === card._id ? newCardItem : c)));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleCardDisLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some((i) => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api\n      .disLikeCard(card._id, isLiked)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards((state) => state.map((c) => (c._id === card._id ? newCardItem : c)));\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleUpdateUser(userData) {\n    api\n      .editProfileInfo(userData)\n      .then((userResponse) => {\n        setCurrentUser(userResponse);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleUpdateAvatar({ avatar }) {\n    api\n      .changeAvatar(avatar)\n      .then((linkResponse) => {\n        setCurrentUser(linkResponse);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function handleAddPlace(place) {\n    api\n      .addPlace(place)\n      .then((newCard) => {\n        const newCardItem = {\n          likes: newCard.likes,\n          _id: newCard._id,\n          src: newCard.link,\n          alt: newCard.name,\n          owner: newCard.owner,\n          title: newCard.name,\n        };\n        setCards([newCardItem, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => console.log(err));\n  }\n\n  // Функция handleLogin - обработчик события входа в систему. Она вызывается, когда пользователь\n  // успешно входит в систему и передает данные пользователя.\n  // Эта функция обновляет состояния loggedIn и userData\n  // при успешном входе пользователя в систему. Обновление этих состояний может\n  // привести к изменениям в пользовательском интерфейсе, таких как отображение\n  // защищенных маршрутов или отображение информации о пользователе на странице профиля.\n  const handleLogin = ({ email }) => {\n    // setLoggedIn(true); - вызов функции setLoggedIn с аргументом true.\n    // Это обновляет состояние loggedIn и устанавливает его в значение true,\n    // что означает, что пользователь вошел в систему.\n    setLoggedIn(true);\n    // Вызов функции setUserData с объектом, содержащим password и email.\n    // Это обновляет состояние userData и устанавливает его в новый объект с переданными значениями password и email.\n    // Таким образом, данные пользователя обновляются в мой профайл после успешного входа.\n    setUserData({ email });\n  };\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      {/* Внедряем» данные из currentUser с помощью провайдера контекста */}\n      <div className=\"App\">\n        <Header isLoggedIn={loggedIn} userData={userData}/>\n\n        <Routes>\n          <Route path=\"/sign-up\" element={<Register />} />\n          <Route path=\"/sign-in\" element={<Login handleLogin={handleLogin} />} />\n          <Route\n            path=\"/main\"\n            element={\n              <Main\n                onEditProfile={handleEditProfileClick}\n                onAddPlace={handleAddPlaceClick}\n                onEditAvatar={handleEditAvatarClick}\n                onCardClick={handleCardClick}\n                onCardDelete={handleCardDelete}\n                onCardLike={handleCardLike}\n                onCardDislike={handleCardDisLike}\n                cards={cards}\n              />\n            }\n          ></Route>\n        </Routes>\n        <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlace} />\n        <PopupWithForm popupName=\"popup_type_deleteCard\" popupTitle=\"Вы уверены?\" buttonName=\"Да\"></PopupWithForm>\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n        <Footer />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}